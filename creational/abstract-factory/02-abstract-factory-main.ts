/**
 * üìå **Descripci√≥n del Desaf√≠o: Implementaci√≥n del Patr√≥n Abstract Factory para Veh√≠culos**
 *
 * üéØ **Objetivo:** Crear un sistema de fabricaci√≥n de veh√≠culos utilizando el patr√≥n Abstract Factory
 * que permita producir distintos tipos de veh√≠culos y sus componentes de manera coherente.
 *
 * üìã **Instrucciones:**
 *
 * 1Ô∏è‚É£ **Completar las Clases de Productos:**
 *    ‚Ä¢ üöó `ElectricCar`: Debe implementar `Vehicle` y mostrar "Ensamblando un auto el√©ctrico"
 *    ‚Ä¢ üöó `GasCar`: Debe implementar `Vehicle` y mostrar "Ensamblando un auto de combusti√≥n"
 *    ‚Ä¢ ‚öôÔ∏è `ElectricEngine`: Debe implementar `Engine` y mostrar "Arrancando motor el√©ctrico"
 *    ‚Ä¢ ‚öôÔ∏è `GasEngine`: Debe implementar `Engine` y mostrar "Arrancando motor de combusti√≥n"
 *
 * 2Ô∏è‚É£ **Implementar las Clases de F√°bricas:**
 *    ‚Ä¢ ‚ö° `ElectricVehicleFactory`: Debe crear instancias de `ElectricCar` y `ElectricEngine`
 *    ‚Ä¢ ‚õΩ `GasVehicleFactory`: Debe crear instancias de `GasCar` y `GasEngine`
 *
 * 3Ô∏è‚É£ **Pruebas del Sistema:**
 *    ‚Ä¢ Ejecutar el programa y verificar que cada f√°brica produce correctamente
 *      su tipo espec√≠fico de veh√≠culo y motor
 *    ‚Ä¢ Comprobar que los mensajes mostrados son los esperados seg√∫n el tipo de componente
 *
 */
import {ElectricVehicleFactory, GasVehicleFactory, VehicleFactory} from "./02-abstract-factory";

function main(factory: VehicleFactory) {
    const vehicle = factory.createVehicle();
    const engine = factory.createEngine();

    vehicle.assemble();
    engine.start();
}

console.log('Creando veh√≠culo el√©ctrico:');
main(new ElectricVehicleFactory());

console.log('\nCreando veh√≠culo de combusti√≥n:');
main(new GasVehicleFactory());