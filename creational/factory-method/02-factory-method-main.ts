
/**
 * üìå **Descripci√≥n del Desaf√≠o: Generaci√≥n de Reportes con el Patr√≥n Factory**
 *
 * üéØ **Objetivo:** Implementar un sistema de generaci√≥n de reportes utilizando una interfaz com√∫n y el patr√≥n de dise√±o Factory Method.
 *
 * üõ†Ô∏è **Tareas a realizar:**
 *
 * 1Ô∏è‚É£ **Implementar la interfaz `Report`**
 *    - Debe definir un m√©todo `generate()`, que ser√° implementado en las clases de reportes.
 *
 * 2Ô∏è‚É£ **Completar las clases `SalesReport` e `InventoryReport`**
 *    - Ambas clases deben implementar la interfaz `Report`.
 *    - Cada una debe personalizar su m√©todo `generate()` para generar el contenido adecuado del reporte.
 *
 * 3Ô∏è‚É£ **Crear las f√°bricas `SalesReportFactory` e `InventoryReportFactory`**
 *    - Estas clases deben encargarse de crear instancias de `SalesReport` e `InventoryReport`, respectivamente.
 *    - Aplicar el patr√≥n **Factory Method** para encapsular la creaci√≥n de los objetos.
 *
 *
 * üöÄ **Ejemplo de uso esperado:**
 *
 * üîç **Resultado esperado (seg√∫n el tipo de reporte seleccionado):**
 * ```
 * Reporte de Ventas generado con √©xito.
 * ```
 * o
 * ```
 * Reporte de Inventario generado con √©xito.
 * ```
 */


import {COLORS} from "../../helpers";
import promptSync from 'prompt-sync';
const prompt = promptSync();

import {InventoryReportFactory, ReportFactory, SalesReportFactory} from "./02-factory-method";


function main() {
    let reportFactory: ReportFactory;

    const reportType = prompt('¬øQu√© tipo de reporte deseas? (sales/inventory)');

    if (reportType === 'sales') {
        reportFactory = new SalesReportFactory();
    } else {
        reportFactory = new InventoryReportFactory();
    }

    reportFactory.generateReport();

}

main();